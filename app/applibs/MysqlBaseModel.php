<?php
namespace app\applibs;

use Yii;
use yii\db\Query;
use yii\db\Connection;
use yii\db\QueryBuilder;

abstract class MysqlBaseModel extends \yii\base\Model
{
    const SCENARIO_INSERT = 'insert';
    const SCENARIO_UPDATE = 'update';
    
    /**
     * Finds a single record that has the specified attribute values.
     * @param string|array $condition the conditions that should be put in the WHERE part.
     * @param array $params the parameters (name => value) to be bound to the query.
     * @param string|array $columns the columns to add to the select.
     * @return array|bool the record found. false if none is found.
     */
    public static function findByAttributes($condition, $params = [], $columns = null)
    {
        $query = new Query();
        if ($columns) {
            $query->addSelect($columns);
        }
        $query->from(static::tableName());
        $query->where($condition, $params);
        $row = $query->createCommand(static::getDb())->queryOne();
        return $row;
    }
    
    /**
     * Finds all records that has the specified attribute values.
     * @param string|array $condition the conditions that should be put in the WHERE part.
     * @param array $params the parameters (name => value) to be bound to the query.
     * @param string|array $columns the columns to add to the select.
     * @return array all rows of the query result. Each array element is an array representing a row of data.
     * An empty array is returned if the query results in nothing.
     */
    public static function findAllByAttributes($condition, $params = [], $columns = null)
    {
        $query = new Query();
        if ($columns) {
            $query->addSelect($columns);
        }
        $query->from(static::tableName());
        $query->where($condition, $params);
        $rows = $query->createCommand(static::getDb())->queryAll();
        return $rows;
    }
    
    /**
     * Creates an INSERT SQL statement.
     * For example,
     *
     * ~~~
     * $sql = MysqlBaseModel::buildInsertSql('user', [
     *  'name' => 'Sam',
     *  'age' => 30,
     * ], $params);
     * ~~~
     *
     * The method will properly escape the table and column names.
     *
     * @param string $table the table that new rows will be inserted into.
     * @param array $columns the column data (name => value) to be inserted into the table.
     * @param array $params the binding parameters that will be generated by this method.
     * They should be bound to the DB command later.
     * @param Connection $db
     * @return string the INSERT SQL
     */
    public static function buildInsertSql($table, $columns, &$params, $db = null)
    {
        if ($db === null) {
            $db = static::getDb();
        }
        $names = [];
        $placeholders = [];
        foreach ($columns as $name => $value) {
            $names[] = $db->quoteColumnName($name);
            if ($value instanceof \yii\db\Expression) {
                $placeholders[] = $value->expression;
                foreach ($value->params as $n => $v) {
                    $params[$n] = $v;
                }
            } else {
                $phName = QueryBuilder::PARAM_PREFIX . count($params);
                $placeholders[] = $phName;
                $params[$phName] = $value;
            }
        }
    
        return 'INSERT INTO ' . $db->quoteTableName($table)
        . ' (' . implode(', ', $names) . ') VALUES ('
                . implode(', ', $placeholders) . ')';
    }
    
    /**
     * Creates an UPDATE SQL statement.
     * For example,
     *
     * ~~~
     * $params = [];
     * $sql = MysqlBaseModel::buildUpdateSql('user', ['status' => 1], 'age > 30', $params);
     * ~~~
     *
     * The method will properly escape the table and column names.
     *
     * @param string $table the table to be updated.
     * @param array $columns the column data (name => value) to be updated.
     * @param array|string $condition the condition that will be put in the WHERE part. Please
     * refer to [[Query::where()]] on how to specify condition.
     * @param array $params the binding parameters that will be modified by this method
     * so that they can be bound to the DB command later.
     * @param Connection $db
     * @return string the UPDATE SQL
     */
    public static function buildUpdateSql($table, $columns, $condition, &$params, $db = null)
    {
        if ($db === null) {
            $db = static::getDb();
        }
        $lines = [];
        foreach ($columns as $name => $value) {
            if ($value instanceof \yii\db\Expression) {
                $lines[] = $db->quoteColumnName($name) . '=' . $value->expression;
                foreach ($value->params as $n => $v) {
                    $params[$n] = $v;
                }
            } else {
                $phName = QueryBuilder::PARAM_PREFIX . count($params);
                $lines[] = $db->quoteColumnName($name) . '=' . $phName;
                $params[$phName] = $value;
            }
        }
    
        $sql = 'UPDATE ' . $db->quoteTableName($table) . ' SET ' . implode(', ', $lines);
        $qb = $db->getQueryBuilder();
        $where = $qb->buildWhere($condition, $params);
    
        return $where === '' ? $sql : $sql . ' ' . $where;
    }
    
    public static function updateCounter($cond, $field, $num = 1, $dbConn = null)
    {
        $num = (int) $num;
        if ($num > 0) {
            $sql = 'update '.static::tableName()." set {$field}={$field}+{$num} where $cond";
        } else {
            $num *= -1;
            $sql = 'update '.static::tableName()." set {$field}={$field}-{$num} where $cond and {$field} >= {$num}";
        }
        if ($dbConn === null) {
            $dbConn = static::getDb();
        }
        $n = $dbConn->createCommand($sql)->execute();
        return $n > 0;
    }
    
    /**
     * Returns the database connection used by this AR class.
     * By default, the "db" application component is used as the database connection.
     * You may override this method if you want to use a different database connection.
     * @return Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->getDb();
    }
    
    /**
     * Declares the name of the database table associated with this AR class.
     * By default this method returns the class name as the table name by calling [[Inflector::camel2id()]]
     * with prefix [[Connection::tablePrefix]]. For example if [[Connection::tablePrefix]] is 'tbl_',
     * 'Customer' becomes 'tbl_customer', and 'OrderItem' becomes 'tbl_order_item'. You may override this method
     * if the table is not named after this convention.
     * @return string the table name
     */
    public static function tableName()
    {
        throw new \Exception('no table name defined');
    }
}
